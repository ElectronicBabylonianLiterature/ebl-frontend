import { TextLine } from 'transliteration/domain/text-line'

export const akkadianWords: TextLine = new TextLine({
  prefix: 'n+1.',
  content: [
    {
      value: '%n',
      cleanValue: '%n',
      enclosureType: [],
      erasure: 'NONE',
      language: 'AKKADIAN',
      normalized: true,
      type: 'LanguageShift',
    },
    {
      value: 'kur',
      cleanValue: 'kur',
      enclosureType: [],
      erasure: 'NONE',
      lemmatizable: true,
      alignment: null,
      uniqueLemma: [],
      normalized: true,
      language: 'AKKADIAN',
      parts: [
        {
          value: 'kur',
          cleanValue: 'kur',
          enclosureType: [],
          erasure: 'NONE',
          type: 'ValueToken',
        },
      ],
      modifiers: [],
      type: 'AkkadianWord',
    },
    {
      value: '<kur>',
      cleanValue: '<kur>',
      enclosureType: [],
      erasure: 'NONE',
      lemmatizable: true,
      alignment: null,
      uniqueLemma: [],
      normalized: true,
      language: 'AKKADIAN',
      parts: [
        {
          value: '<',
          cleanValue: '',
          enclosureType: [],
          erasure: 'NONE',
          side: 'LEFT',
          type: 'Emendation',
        },
        {
          value: 'kur',
          cleanValue: 'kur',
          enclosureType: ['EMENDATION'],
          erasure: 'NONE',
          type: 'ValueToken',
        },
        {
          value: '>',
          cleanValue: '',
          enclosureType: ['EMENDATION'],
          erasure: 'NONE',
          side: 'RIGHT',
          type: 'Emendation',
        },
      ],
      modifiers: [],
      type: 'AkkadianWord',
    },
    {
      value: '[kur-(kur)...]',
      cleanValue: '[kur-(kur)...]',
      enclosureType: [],
      erasure: 'NONE',
      lemmatizable: true,
      alignment: null,
      uniqueLemma: [],
      normalized: true,
      language: 'AKKADIAN',
      parts: [
        {
          value: '[',
          cleanValue: '',
          enclosureType: [],
          erasure: 'NONE',
          side: 'LEFT',
          type: 'BrokenAway',
        },
        {
          value: 'kur',
          cleanValue: 'kur',
          enclosureType: ['BROKEN_AWAY'],
          erasure: 'NONE',
          type: 'ValueToken',
        },
        {
          value: '-',
          cleanValue: '-',
          enclosureType: ['BROKEN_AWAY'],
          erasure: 'NONE',
          type: 'Joiner',
        },
        {
          value: '(',
          cleanValue: '',
          enclosureType: ['BROKEN_AWAY'],
          erasure: 'NONE',
          side: 'LEFT',
          type: 'PerhapsBrokenAway',
        },
        {
          value: 'kur',
          cleanValue: 'kur',
          enclosureType: ['BROKEN_AWAY', 'PERHAPS_BROKEN_AWAY'],
          erasure: 'NONE',
          type: 'ValueToken',
        },
        {
          value: ')',
          cleanValue: '',
          enclosureType: ['BROKEN_AWAY', 'PERHAPS_BROKEN_AWAY'],
          erasure: 'NONE',
          side: 'RIGHT',
          type: 'PerhapsBrokenAway',
        },
        {
          value: '...',
          cleanValue: '...',
          enclosureType: ['BROKEN_AWAY'],
          erasure: 'NONE',
          type: 'UnknownNumberOfSigns',
        },
        {
          value: ']',
          cleanValue: '',
          enclosureType: ['BROKEN_AWAY'],
          erasure: 'NONE',
          side: 'RIGHT',
          type: 'BrokenAway',
        },
      ],
      modifiers: [],
      type: 'AkkadianWord',
    },
    {
      value: '(kur)',
      cleanValue: '(kur)',
      enclosureType: [],
      erasure: 'NONE',
      lemmatizable: true,
      alignment: null,
      uniqueLemma: [],
      normalized: true,
      language: 'AKKADIAN',
      parts: [
        {
          value: '(',
          cleanValue: '',
          enclosureType: [],
          erasure: 'NONE',
          side: 'LEFT',
          type: 'PerhapsBrokenAway',
        },
        {
          value: 'kur',
          cleanValue: 'kur',
          enclosureType: ['PERHAPS'],
          erasure: 'NONE',
          type: 'ValueToken',
        },
        {
          value: ')',
          cleanValue: '',
          enclosureType: ['PERHAPS'],
          erasure: 'NONE',
          side: 'RIGHT',
          type: 'PerhapsBrokenAway',
        },
      ],
      modifiers: [],
      type: 'AkkadianWord',
    },
    {
      value: 'kur-kur...',
      cleanValue: 'kur-kur...',
      enclosureType: [],
      erasure: 'NONE',
      lemmatizable: true,
      alignment: null,
      uniqueLemma: [],
      normalized: true,
      language: 'AKKADIAN',
      parts: [
        {
          value: 'kur',
          cleanValue: 'kur',
          enclosureType: [],
          erasure: 'NONE',
          type: 'ValueToken',
        },
        {
          value: '-',
          cleanValue: '-',
          enclosureType: [],
          erasure: 'NONE',
          type: 'Joiner',
        },
        {
          value: 'kur',
          cleanValue: 'kur',
          enclosureType: [],
          erasure: 'NONE',
          type: 'ValueToken',
        },
        {
          value: '...',
          cleanValue: '...',
          enclosureType: [],
          erasure: 'NONE',
          type: 'UnknownNumberOfSigns',
        },
      ],
      modifiers: [],
      type: 'AkkadianWord',
    },
  ],
  lineNumber: {
    number: 1,
    hasPrime: false,
    prefixModifier: 'n',
    suffixModifier: null,
    type: 'LineNumber',
  },
  type: 'TextLine',
})

export const breaks: TextLine = new TextLine({
  prefix: 'n+2.',
  content: [
    {
      value: '%n',
      cleanValue: '%n',
      enclosureType: [],
      erasure: 'NONE',
      language: 'AKKADIAN',
      normalized: true,
      type: 'LanguageShift',
    },
    {
      value: '...',
      cleanValue: '...',
      enclosureType: [],
      erasure: 'NONE',
      type: 'UnknownNumberOfSigns',
    },
    {
      value: '|',
      cleanValue: '|',
      enclosureType: [],
      erasure: 'NONE',
      isUncertain: false,
      type: 'MetricalFootSeparator',
    },
    {
      value: '...',
      cleanValue: '...',
      enclosureType: [],
      erasure: 'NONE',
      type: 'UnknownNumberOfSigns',
    },
    {
      value: '(|)',
      cleanValue: '(|)',
      enclosureType: [],
      erasure: 'NONE',
      isUncertain: true,
      type: 'MetricalFootSeparator',
    },
    {
      value: '...',
      cleanValue: '...',
      enclosureType: [],
      erasure: 'NONE',
      type: 'UnknownNumberOfSigns',
    },
    {
      value: '||',
      cleanValue: '||',
      enclosureType: [],
      erasure: 'NONE',
      isUncertain: false,
      type: 'Caesura',
    },
    {
      value: '...',
      cleanValue: '...',
      enclosureType: [],
      erasure: 'NONE',
      type: 'UnknownNumberOfSigns',
    },
    {
      value: '(||)',
      cleanValue: '(||)',
      enclosureType: [],
      erasure: 'NONE',
      isUncertain: true,
      type: 'Caesura',
    },
    {
      value: '...',
      cleanValue: '...',
      enclosureType: [],
      erasure: 'NONE',
      type: 'UnknownNumberOfSigns',
    },
  ],
  lineNumber: {
    number: 2,
    hasPrime: false,
    prefixModifier: 'n',
    suffixModifier: null,
    type: 'LineNumber',
  },
  type: 'TextLine',
})
